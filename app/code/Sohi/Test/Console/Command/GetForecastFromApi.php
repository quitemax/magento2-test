<?php
/**
 * Copyright Â© Sohi. All rights reserved.
 * See LICENSE_SOHI.txt for license details.
 */

namespace Sohi\Test\Console\Command;

use Braintree\Exception;
use Sohi\Test\Enum\ForecastEnum;
use Sohi\Test\Logger\Logger;
use Sohi\Test\Api\Data\ForecastInterfaceFactory;
use Sohi\Test\Model\ForecastRepository;
use Magento\Framework\App\Request\DataPersistorInterface;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\HTTP\Client\Curl;
use Magento\Framework\Serialize\Serializer\Json;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;


/**
 * Class GetForecastFromApi
 */
class GetForecastFromApi extends Command
{
    const URL_TEMPLATE = 'http://api.openweathermap.org/data/2.5/weather?q=%1&lang=%2&appid=%3';

    /**
     * @var DataPersistorInterface
     */
    private DataPersistorInterface $dataPersistor;

    /**
     * @var ForecastInterfaceFactory
     */
    private ForecastInterfaceFactory $forecastFactory;

    /**
     * @var ForecastRepository
     */
    private ForecastRepository $forecastRepository;

    /**
     * @var Logger
     */
    private Logger $logger;

    /**
     * @var Curl
     */
    private Curl $curl;

    /**
     * @var Json
     */
    private Json $jsonSerializer;

    /**
     * @param string|null $name
     * @param DataPersistorInterface $dataPersistor
     * @param ForecastInterfaceFactory $forecastFactory
     * @param ForecastRepository $forecastRepository
     * @param Curl $curl
     * @param Json $jsonSerializer
     * @param Logger $logger
     */
    public function __construct(
        string $name = null,
        DataPersistorInterface $dataPersistor,
        ForecastInterfaceFactory $forecastFactory,
        ForecastRepository $forecastRepository,
        Curl $curl,
        Json $jsonSerializer,
        Logger $logger
    ) {
        // TODO: Change from a console command to a cron job
        parent::__construct($name);

        $this->dataPersistor = $dataPersistor;
        $this->forecastFactory = $forecastFactory;
        $this->forecastRepository = $forecastRepository;
        $this->logger = $logger;
        $this->curl = $curl;
        $this->jsonSerializer = $jsonSerializer;
    }

    protected function configure()
    {
        $this->setName('sohi_test:forecast:get-from-api');
        $this->setDescription('Lorem ipsum'); // TODO: Change the description

        parent::configure(); // TODO: Change the autogenerated stub
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int|void
     */
    protected function execute(
        InputInterface $input,
        OutputInterface $output
    ) {
        try {
            $forecastData = $this->getCurrentForecast();

            $data = [
                'title' => $forecastData['weather'][0]['main'],
                'description' => $forecastData['weather'][0]['description'],
                'temp' => $forecastData['main']['temp'],
                'temp_feel' => $forecastData['main']['feels_like'],
                'pressure' => $forecastData['main']['pressure'],
                'humidity' => $forecastData['main']['humidity'],
                'visibility' => $forecastData['visibility'],
                'wind_spd' => $forecastData['wind']['speed'],
                'wind_deg' => $forecastData['wind']['deg'],
                'clouds' => $forecastData['clouds']['all'],
            ];

            $forecast = $this->forecastFactory->create();
            $forecast->setData($data);

            $forecast = $this->forecastRepository->save($forecast);
            $this->dataPersistor->clear(ForecastEnum::DATA_PERSISTOR_KEY);
            $output->writeln('<info>Success Message.</info>');
        } catch (CouldNotSaveException $e) {
            $this->logger->error($e);
        } catch (Exception $e) {
            $this->logger->critical($e);
        }
    }

    public function getCurrentForecast()
    {
        $urlTemplate = 'http://api.openweathermap.org/data/2.5/weather?q=%1&lang=%2&appid=%3';
        // TODO: Connect admin config values to api key and city (and maybe language?)
        $url = (string)__(self::URL_TEMPLATE,
            'Lublin',
            'pl',
            'e702777bd98084c133f900e6accec484'
        );
        $this->curl->get($url);
        $result = $this->curl->getBody();

        return $this->jsonSerializer->unserialize($result);
    }
}
